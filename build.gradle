plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.processmaker'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	runtimeOnly 'org.postgresql:postgresql:42.6.0'

	// f/o - mysql
	//runtimeOnly 'com.mysql:mysql-connector-j'

	// f/o - sqlite
	//implementation 'org.xerial:sqlite-jdbc:3.36.0'  // 최신 버전을 사용할 것
	//implementation 'org.hibernate:hibernate-core:5.4.30.Final' // Hibernate Core
	//implementation 'org.hibernate:hibernate-sqlite:5.4.0.1' // SQLite Dialect 라이브러리

	// f/o - poi
	// https://moongproject.tistory.com/5
	// https://mvnrepository.com/artifact/org.apache.poi/poi
	// implementation 'org.apache.poi:poi:4.1.2'
	// implementation 'org.apache.poi:poi-ooxml:4.1.2'
	// implementation 'org.apache.poi:poi-scratchpad:4.1.2'
}

tasks.named('test') {
	useJUnitPlatform()
}


// REACT BUILD CONFIG
/*
def frontendDir = "$projectDir/src/main/frontend"	// react 프로젝트 소스 경로

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "deleteReactBuildFiles" }	// task 종단점 설정

task installReact(type: Exec) {	// react 설치
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {	// react 프로젝트 build
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {		// build된 소스 spring static 폴더로 copy
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}

task deleteReactBuildFiles(type: Delete) {	// frontend 폴더에 build된 소스 삭제
	dependsOn "copyReactBuildFiles"
	delete "$frontendDir/build"
}
*/